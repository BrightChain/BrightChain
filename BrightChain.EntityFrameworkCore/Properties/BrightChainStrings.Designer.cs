//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BrightChain.EntityFrameworkCore.Properties {
    using System;
    using System.Runtime.Serialization;


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class BrightChainStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal BrightChainStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BrightChain.EntityFrameworkCore.Properties.BrightChainStrings", typeof(BrightChainStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot apply &apos;DefaultIfEmpty&apos; after a client-evaluated projection. Consider applying &apos;DefaultIfEmpty&apos; before last &apos;Select&apos; or use &apos;AsEnumerable&apos; before &apos;DefaultIfEmpty&apos; to apply it on client-side..
        /// </summary>
        internal static string DefaultIfEmptyAppliedAfterProjection {
            get {
                return ResourceManager.GetString("DefaultIfEmptyAppliedAfterProjection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using &apos;Distinct&apos; operation on a projection containing a subquery is not supported..
        /// </summary>
        internal static string DistinctOnSubqueryNotSupported {
            get {
                return ResourceManager.GetString("DistinctOnSubqueryNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified entity type &apos;{derivedType}&apos; is not derived from &apos;{entityType}&apos;..
        /// </summary>
        internal static string InvalidDerivedTypeInEntityProjection {
            get {
                return ResourceManager.GetString("InvalidDerivedTypeInEntityProjection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saved {count} entities to in-memory store..
        /// </summary>
        internal static string LogSavedChanges {
            get {
                return ResourceManager.GetString("LogSavedChanges", resourceCulture);
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to Transactions are not supported by the in-memory store. See http://go.microsoft.com/fwlink/?LinkId=800142.
        /// </summary>
        internal static string LogTransactionsNotSupported {
            get {
                return ResourceManager.GetString("LogTransactionsNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no query string because the in-memory provider does not use a string-based query language..
        /// </summary>
        internal static string NoQueryStrings {
            get {
                return ResourceManager.GetString("NoQueryStrings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required properties &apos;{requiredProperties}&apos; are missing for the instance of entity type &apos;{entityType}&apos;. Consider using &apos;DbContextOptionsBuilder.EnableSensitiveDataLogging&apos; to see the entity key value..
        /// </summary>
        internal static string NullabilityErrorException {
            get {
                return ResourceManager.GetString("NullabilityErrorException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required properties &apos;{requiredProperties}&apos; are missing for the instance of entity type &apos;{entityType}&apos; with the key value &apos;{keyValue}&apos;..
        /// </summary>
        internal static string NullabilityErrorExceptionSensitive {
            get {
                return ResourceManager.GetString("NullabilityErrorExceptionSensitive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to translate set operation after client projection has been applied. Consider moving the set operation before the last &apos;Select&apos; call..
        /// </summary>
        internal static string SetOperationsNotAllowedAfterClientEvaluation {
            get {
                return ResourceManager.GetString("SetOperationsNotAllowedAfterClientEvaluation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to bind &apos;{memberType}&apos; &apos;{member}&apos; to entity projection of &apos;{entityType}&apos;..
        /// </summary>
        internal static string UnableToBindMemberToEntityProjection {
            get {
                return ResourceManager.GetString("UnableToBindMemberToEntityProjection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to update or delete an entity that does not exist in the store..
        /// </summary>
        internal static string UpdateConcurrencyException {
            get {
                return ResourceManager.GetString("UpdateConcurrencyException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conflicts were detected for instance of entity type &apos;{entityType}&apos; on the concurrency token properties {properties}. Consider using &apos;DbContextOptionsBuilder.EnableSensitiveDataLogging&apos; to see the conflicting values..
        /// </summary>
        internal static string UpdateConcurrencyTokenException {
            get {
                return ResourceManager.GetString("UpdateConcurrencyTokenException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conflicts were detected for instance of entity type &apos;{entityType}&apos; with the key value &apos;{keyValue}&apos; on the concurrency token property values {conflictingValues}, with corresponding database values {databaseValues}..
        /// </summary>
        internal static string UpdateConcurrencyTokenExceptionSensitive {
            get {
                return ResourceManager.GetString("UpdateConcurrencyTokenExceptionSensitive", resourceCulture);
            }
        }
    }
}
